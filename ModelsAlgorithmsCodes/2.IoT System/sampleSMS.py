import matplotlib.pyplot as plt
from drawnow import *

X = []
Y = []
Z = []
# com subject to change depending on ground station
arduinoData = serial.Serial('com10', 9600)
plt.ion()
cnt = 0

while True:
    while arduinoData.inWaiting() == 0:
        print("Awaiting data")

        pass  # do nothing


import time

#email imports
import smtplib
from string import Template
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import statistics

import africastalking

# Here you create an account with Africastalking
sms_username = "Paste your user name here as a string"
# Sample API KEY looks like this : **********414380635fba5d3ec98e2445007b0fdac8a920b8f68e*********a

sms_api_key = "paste the SMS API link here (It is paid so i keep it private)"
africastalking.initialize(sms_username,sms_api_key)
recepients = recipients = ['+254705583483','# Recepients you want to warn using text SMS']
#recepients = recipients = ['+254705583483']

my_email_address = 'sampleemail@domain.com' #This is yours where the DISASTER mials will be autogenerated from.
me_email_password = 'your password to the above mail' 
alert_boolean = False

temperature_values = []
pressure_values = [10,10]
temperature_threshold = 34
pressure_threshold = 20

#com subject to change
satellite_data = serial.Serial('com10', 9600)
plt.ion()
cnt = 0


def makeFig(): 
    #limits subject to change 
    plt.ylim(0, 120)  # Set y min and max values
    plt.title('Live straming sensor Data')
    plt.grid(True)
    plt.ylabel('Y')  # Set ylabels
    plt.plot(temperature_values, 'ro-', label='temperature_values ',c='BLUE') 
    plt.plot(pressure_values, 'ro-', label='pressure_values ',c='RED') 
    plt.legend(loc='upper left')

def read_return_serial_data():
    while (satellite_data.inWaiting() == 0):  # Wait here until there is data
        print("waiting for data")
        pass  # do nothing
    received_string = satellite_data.readline() # read the line of text from the serial port
    return received_string

def parse_serial_data(received_string):
    #edit out the splitting based on how code comes in from cubesat
    dataArray = received_string.decode("utf-8").split(':')  # Split it into an array called dataArray
    temperature_float = float(dataArray[1])  # Convert second element to floating number and put in P
    #pressure_float = float(dataArray[2])
    temperature_values.append(temperature_float)
    #pressure_values.append(pressure_float)

def temperature_handler_algorithm():
    number_of_values = len(temperature_values)
    if number_of_values>=6:
        temperature_values.pop(0)

    if(len(temperature_values)==5):
        mean_value = statistics.mean(temperature_values)
        print("Mean")
        print(mean_value)
        if mean_value>=temperature_threshold:
            send_alerts(alert_boolean)

def pressure_handler_algorithm():
    number_of_values = len(pressure_values)
    if number_of_values >= 6:
        pressure_values.pop()
    if(number_of_values == 5):
        mean_value = statistics.mean(pressure_values)
        if mean_value>=pressure_threshold:
            send_alerts(alert_boolean)

def pop_plot_values():
    if (cnt > 50):
        temperature_values.pop(0)
        pressure_values.pop()


def get_contacts(filename):
    names = []
    emails = []
    with open(filename, mode='r', encoding='utf-8') as contacts_file:
        for a_contact in contacts_file:
            names.append(a_contact.split()[0])
            emails.append(a_contact.split()[1])
    return names, emails

def read_template(filename):
    with open(filename, 'r', encoding='utf-8') as template_file:
        template_file_content = template_file.read()
    return Template(template_file_content)

def send_email():
    names, emails = get_contacts('mycontacts.txt')
    message_template = read_template('message.txt')

    # set up the SMTP server
    s = smtplib.SMTP(host='smtp.gmail.com', port=587)
    s.starttls()
    s.login(my_email_address, me_email_password)

    for name, email in zip(names, emails):
        msg = MIMEMultipart()       # create a message
        message = message_template.substitute(PERSON_NAME=name.title())
        print(message)

        # setup the parameters of the message
        msg['From']=my_email_address
        msg['To']=email
        msg['Subject']="DISASTER!!"
        
        # add in the message body
        msg.attach(MIMEText(message, 'plain'))
       
        s.send_message(msg)
        del msg
        
    # Terminate the SMTP session and close the connection
    s.quit()

def send_sms():
    sms = africastalking.SMS
    response = sms.send("Beware! A disaster is about to happen", recepients)
    print(response)
def send_alerts(alert_boolean_in_fn):
    if not alert_boolean_in_fn:
        send_email()
        send_sms()
        global alert_boolean
        alert_boolean = True
# main guy execution    

while True: 
    time.sleep(1)
    #cnt = cnt + 1
    parse_serial_data(read_return_serial_data())
    print("Temperature values")
    print(temperature_values)
    print("Pressure values")
    print(pressure_values)
    print("Alert boolean status")
    print(alert_boolean)
    if not alert_boolean:
        temperature_handler_algorithm()
        pressure_handler_algorithm()
    else:
        print("Already sent alert")